"""The exxploit_social_learning culture module has some dynamics.
"""

# This file is part of pycopancore.
#
# Copyright (C) 2016 by COPAN team at Potsdam Institute for Climate
# Impact Research
#
# URL: <http://www.pik-potsdam.de/copan/software>
# License: MIT license

#
#  Imports
#

from pycopancore import ODE, Step, Explicit, Event
from pycopancore.model_components import abstract
from .interface import Culture_

#
#  Define class Culture
#


class Culture(Culture, abstract.Culture):
    """Define properties of exploit_social_learning culture.

    Inherits from Culture_ as the interface
    with all necessary variables and parameters.
    """

    #
    #  Definitions of internal methods
    #

    def __init__(self,
                 *,
                 rewiring_prob=0,
                 **kwargs
                 ):
        """Initialize an instance of Cell."""
        super(Cell, self).__init__(**kwargs)

        self.rewiring_prob = rewiring_prob

    #
    #  Definitions of further methods
    #

    # TODO:
    # Is this the right place here?
    # How should the social update be computed, eg. in several methods?
    def social_update(self, t):
        """Execute the social update.

        Parameters
        ----------
        t : float
            time

        Returns
        -------

        """
        pass

    # TODO:
    # add the social processes here
    processes = []
