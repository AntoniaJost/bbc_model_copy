"""The exploit_social_learning.world class.

In this module the exploit_social_learning World mixing class inherits from
World_ in that basic variables and parameters are defined.
"""
# This file is part of pycopancore.
#
# Copyright (C) 2016 by COPAN team at Potsdam Institute for Climate Impact
# Research
#
# URL: <http://www.pik-potsdam.de/copan/software>
# License: MIT license

#
#  Imports
#

import numpy as np
from pycopancore.model_components import abstract
from .interface import World_

# Should the type of graph already be determined?
# Like igraph, networkx, sparse matrix, ...?
# from igraph import Graph


class World (World_, abstract.World):
    """Define properties of exploit_social_learning.world.

    Inherits from World_ as the interface with all necessary variables
    and parameters.
    """

    #
    #  Definitions of internal methods
    #

    def __init__(self,
                 *,
                 agent_list=[],
                 **kwargs
                 ):
        """Initialize an instance of World.

        Parameters
        ----------
        agent_list
        """
        super(World, self).__init__(**kwargs)

        self.agent_list = agent_list
        assert isinstance(self.contact_network, np.ndarray),\
            'Given network is not an numpy.ndarray.'
        assert (len(self.agent_list) == len(self.contact_network[:, 0]) &
                len(self.agent_list) == len(self.contact_network[0, :])),\
            'agent_list and contact_network do not have suitable dimensions.'

    processes = []

#
#  Definitions of further methods
#

    def has_neighbor(self, individual):
        """Return True if individual has a neighbor and False if not.

        Parameters
        ----------
        individual Individual

        Return
        ------
        boolean
        """
        # TODO:
        # Throw a descriptive exception if individual is not in agents_list.
        index = self.agent_list.index(individual)
        isolated = True
        i = 0
        n = self.contact_network[0].size

        # TODO:
        # Supposed that in the adjacency matrix are 0 on the diagonal.
        # If this is not the case, change the code.
        while isolated and i < n:
            if self.contact_network[index, i] != 0:
                isolated = False
            i += 1
        return not isolated

    def random_neighbor(self, individual):
        """Return a random neighbor of individual.

        Parameters
        ----------
        individual Individual

        Return
        ------
        neighbor Individual
        """
        neighbors = self.get_neighbors(individual)
        neighbor = np.random.choice(neighbors)
        return neighbor

    def get_neighbors(self, individual):
        """Return a list of the neighbors of individual.

        Parameters
        ----------
        individual

        Returns
        -------
        neighbors: A list of all neighbors of individual
        """
        index = self.agent_list.index(individual)
        n = self.contact_network[0].size
        neighbors = []
        for i in range(n):
            if self.contact_network[index, i] != 0:
                neighbors.append(self.agent_list[i])
        return neighbors
