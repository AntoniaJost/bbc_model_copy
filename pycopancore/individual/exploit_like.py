# This file is part of pycopancore.
#
# Copyright (C) 2016 by COPAN team at Potsdam Institute for Climate
# Impact Research
#
# URL: <http://www.pik-potsdam.de/copan/software>
# License: MIT license

"""
Encapsulates states and dynamics of the network between BinarySocialLearner in
an exploit like network_model
"""

#
#  Imports
#

from abstract_culture import Culture
from binary_social_learner imort BinarySocialLearner

#
#  Define class ExploitLike
#

class ExploitLike(Culture):
    """
    Encapsulates states and dynamics of the network between BinarySocialLearner
    in an exploit like network_model
    """

    #
    #  Definitions of internal methods
    #

    def __init__(self,
                 individual_connections,
                 rewiring_prob,
                 update_timescale):

        """
        Initializes an instance of ExploitLike:
        The objects of ExploitLike define connections and/or interactions 
        between objects of class BinarySocialLearner in an exploit_like network

        Parameters
        ----------
        individual_connections: matrix or set of matrices?
            This is an array to describe different types of connections.
            Maybe several adjacency matrices will make sense, this is not 
            yet clear. 
        rewiring_prob: float
            The rewiring probability (needs to be between 0 and 1)
        """

        super(ExploitLike, self).__init__(individual_connections)

        self.rewiring_prob = rewiring_prob

    def __str__(self):
        """
        Return a string representation of the object of class ExploitLike
        """
        return (super(ExploitLike, self).__str__() +
                ('rewiring prob % s'
                ) % (
                self.rewiring_prob)
                )

    #
    #  Definitions of further methods
    #

    def run(self, steps=10000000)
        """
        Running the model either for a defined number of update steps or into
        the consensus state. Thus, perfoming one update means setting
        steps = 1.
        
        Parameter
        ---------
        steps : int
            The number of steps to be performed [Default: 10000000]. If the
            model gets into the consensus state before the total number of
            steps could be perfomed, the model run ends immediatly.
