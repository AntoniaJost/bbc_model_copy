"""Moduletest for the exploit model.

A study to test the runner with the exploit model.
It includes the module components exploit_social_learning,
most_simple_vegetation and simple_extraction.
"""

import numpy as np
import networkx as nx

from pycopancore.models import exploit
from pycopancore.runners.runner import Runner

nc = 10
ni_sust = 5
ni_nonsust = 5

# Order of instantiating is important:
# world (later adding the attributes agent_list and contact_network)
# cells
# individuals
# societies
# Setting attributes of entity types that were not permitted before.
# initializing the model
# parameters of culture

world = exploit.World()

cells = [exploit.Cell(stock=0.5, capacity=1, growth_rate=1, world=world)
         for c in range(nc)]
individuals = [exploit.Individual(strategy=0, imitation_tendency=0,
                                  cell=cells[i]) for i in range(ni_nonsust)]
for i in range(ni_sust):
    individuals.append(exploit.Individual(strategy=1, imitation_tendency=0,
                                          cell=cells[i+ni_nonsust]))
for i in individuals:
    i.rewiring_prob = np.random.rand()
    print('strategies: ', i.strategy)
p = 0.4     # link density
A = nx.adj_matrix(nx.erdos_renyi_graph(ni_sust+ni_nonsust, p)).toarray()
world.contact_network=A
world.agent_list=individuals

# TODO:
# a problem arises here if Society is added in models/exploit.py
# to the list entity_types
# and if this case is not handled in runner.py (save_to_traj() at the end)
# exploit.Society(strategy=0, imitation_tendency=0)

print('initializing model now:')
m = exploit.Model()
# Set the parameters in Culture:
m._process_taxon_objects[exploit.Culture].culture_world = world
print('\n runner starting')
r = Runner(model=m)
traj = r.run(t_1=10, dt=.1)
for i in individuals:
    print('strategies: ', i.strategy)
# print(traj)
# for key, d in traj.items():
    # print('key: ', key)
    # print('associated dict: ', d)
    # for k in d:
    #     print('traj[key][v]: ',d[k])
