"""Moduletest for the exploit model.

A study to test the runner with the exploit model.
It includes the module components exploit_social_learning,
most_simple_vegetation and simple_extraction.
"""

import numpy as np
import networkx as nx

from pycopancore.models import exploit
from pycopancore.runners.runner import Runner

nc = 10
ni_sust = 5
ni_nonsust = 5


exploit.Model.configure()

for c in range(nc):
    exploit.Cell(stock=0.5, capacity=1, growth_rate=1)
individuals = [exploit.Individual(strategy=0, imitation_tendency=0) for i in
               range(ni_nonsust)]
for i in range(ni_sust):
    individuals.append(exploit.Individual(strategy=1, imitation_tendency=0))
exploit.Individual.rewiring_prob.set_values(entities=individuals,
                                            values=np.random.rand(10))
p = 0.4     # link density
A = nx.adj_matrix(nx.erdos_renyi_graph(ni_sust+ni_nonsust, p)).toarray()
world = exploit.World(agent_list=individuals, contact_network=A)
# print('exploit.Cell.entities= ', exploit.Cell.entities)
# print('\n instantiating model')
print('initializing model now:')
m = exploit.Model()
# Set the parameters in Culture:
exploit.Culture.culture_world.set_values(entities=[
    m._process_taxon_objects[exploit.Culture]], values=[world])
print('\n runner starting')
r = Runner(model=m)
traj = r.run(t_1=10, dt=.1)
# print(traj)
